02-06-2025
=================
1)How would you convert seconds into time?
ans)def convert_seconds_to_time(seconds):
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    return f"{hours:02}:{minutes:02}:{secs:02}"


=========================================================2)How would you display the number of weekends in the current month
import datetime
import calendar

def count_weekends_in_current_month():
    today = datetime.date.today()
    year = today.year
    month = today.month
    _, num_days = calendar.monthrange(year, month)

    weekend_count = 0

    for day in range(1, num_days + 1):
        current_date = datetime.date(year, month, day)
        if current_date.weekday() in (5, 6):  
            weekend_count += 1

    return weekend_count


print("Number of weekends in current month:", count_weekends_in_current_month())
======================================================
3)Employee table column names
| EMPLOYEE_ID | FIRST_NAME  | LAST_NAME   | EMAIL    | PHONE_NUMBER       | HIRE_DATE  | JOB_ID     | SALARY   | COMMISSION_PCT | MANAGER_ID | DEPARTMENT_ID

department columns:
DEPARTMENT_ID | DEPARTMENT_NAME      | MANAGER_ID | LOCATION_ID

Write a MySQL query to find the name (first_name, last name), department ID and name of all the employees.

select first_name,last_name,department_id from Employee;
========================================================
4)job_history table columns
employee_id  start_date  end_date    job_id department_id

jobs table columns
JOB_ID  | JOB_TITLE | MIN_SALARY | MAX_SALARY

Write a MySQL query to find the employee ID, job title, number of days between ending date and starting date for all jobs in department 90 from job history.

select jh.employee_id,jo.job_title,datediff(jh.end_date,jh.start_date) as number_of_days from job_history jh join jobs jo on jh.job_id=jo.job_id where jh.department_id=90;
========================================================
5)employee table columns
| EMPLOYEE_ID | FIRST_NAME  | LAST_NAME   | EMAIL    | PHONE_NUMBER       | HIRE_DATE  | JOB_ID     | SALARY   | COMMISSION_PCT | MANAGER_ID | DEPARTMENT_ID

Write a MySQL query to find the name (first_name, last_name) and the salary of the employees who have a higher salary than the employee whose last_name='Bull'.

select first_name,last_name,salary from employee where salary>(select salary from employee where lastname='Bull');
=======================================================
6)employee table columns
EMPLOYEE_ID | FIRST_NAME  | LAST_NAME   | EMAIL    | PHONE_NUMBER       | HIRE_DATE  | JOB_ID     | SALARY   | COMMISSION_PCT | MANAGER_ID | DEPARTMENT_ID 

departments table columns
DEPARTMENT_ID | DEPARTMENT_NAME      | MANAGER_ID | LOCATION_ID

Write a MySQL query to find the name (first_name, last_name) of all employees who works in the IT department.
 
select e.first_name,e.last_name from employee e join departments d on e.department_id=d.department_id where d.department_name='IT';
========================================================
7)locations table columns
location_id | street_address | postal_code  city |       state_province | country_id|

Write a MySQL query to find the name (first_name, last_name) of the employees who have a manager and worked in a USA based department.

SELECT first_name, last_name FROM employees WHERE department_id IN (SELECT department_id FROM departments 
WHERE location_id IN (SELECT location_id FROM locations 
WHERE UPPER(country_id) = 'US'));
========================================================
8)locations table columns
location_id | street_address   |   postal_code  |  city        state_province | country_id

countries table columns
country_id | country_name | region_id

Write a MySQL query to find the addresses (location_id, street_address, city, state_province, country_name) of all the departments.

select l.location_id,l.street_address,l.city,l.state_province,c.country_name from locations l join countries c on l.country_id=c.country_id;
========================================================
9)Write a MySQL query to use EXPLAIN to analyze the performance of a SELECT query retrieving all orders placed after a specific date from the Orders table

explain select * from Orders where order_date>'2025-06-02';
=========================================================
10)Explanation
The first column is an alphabetically ordered list of Doctor names.
The second column is an alphabetically ordered list of Professor names.
The third column is an alphabetically ordered list of Singer names.
The fourth column is an alphabetically ordered list of Actor names.
The empty cell data for columns with less than the maximum number of names per occupation (in this case, the Professor and Actor columns) are filled with NULL values.

pivot table columns are
name, occupation

with ranked_names as (select name,occupation,row_number() over (partition by occupation order by name) as rn from PivotTable),
pivoted AS (
    SELECT
        MAX(CASE WHEN occupation = 'Doctor' THEN name END) AS Doctor,
        MAX(CASE WHEN occupation = 'Professor' THEN name END) AS Professor,
        MAX(CASE WHEN occupation = 'Singer' THEN name END) AS Singer,
        MAX(CASE WHEN occupation = 'Actor' THEN name END) AS Actor
    FROM ranked_names
    GROUP BY rn
)
SELECT * FROM pivoted;
=========================================================
11)Suppose you have a table with order details and write a query to fetch all the orders done last 7 days

select * from Orders where order_date>=now()-interval 7day;
========================================================
12)Customers With No Orders in Last 3 Months

SELECT c.customer_id, c.customer_name
FROM Customers c
LEFT JOIN Orders o
  ON c.customer_id = o.customer_id
  AND o.order_date >= CURDATE() - INTERVAL 3 MONTH
WHERE o.order_id IS NULL;
========================================================
14)employee table columns are:
empno,empname,dept,salary,comm

i)to display name of employees staring from 'v' in ascending order of their salary.

select empname from employee where empname like 'v%' order by salary;

ii)to display the details of all sales dept employee who are earning salary more than 20000.

select * from employee where dept='sales' and salary>20000;

iii)to count distict dept from table
 
select count(distinct(dept)) as dept_count from employee;

iv)to change the salary of nithin from 18000 to 20000;
 
update employee set salary=20000 where empname='nithin';

v)insert new row in the table employee.
 
insert into employee values(6,'sumith','hr',40000,2000);

vi)select avg(comm) fro employee.
select avg(comm) as average_comm from employee;

vii)fetch empname,dept from employee who are in the hr and accounts.

select empname,dept from employee where dept='HR' and dept='accounts';

viii)fetch the empname,salary from employee and add 100 to the old salary print as new salary
 
select empname,salary,salary+100 as newsalary from  employee;
========================================================
15)account table columns are:
ano,aname,address

transact table columns are:
trno,ano,amount,type,dot

i)To display details of all transactions of type withdraw from transact table

select * from transact where type='withdraw';

ii)to display ano,amount,of all deposit and withdrawals done in month of May 2017 from table transact.

select a.ano,t.amount,year(t.dot) as year,month(t.dot) as month from account a join transact t on a.ano=t.ano where type='deposit' and type='withdrawals' and year=2017 and month=5;

iii)To display first date of transaction(DoT) from table transact for account having ano as 102.

select * from transact where ano=102 order by dot limit 1;

iv)To display ano,aname,amount, and dot of those persons from account and transact table who have done transaction less than or equal to 3000

select a.ano,a.aname,t.amount,t.dot from account a join transact t on a.ano=t.ano where t.amount<=3000;

v)select ano,aname from account where address not in ('Chennai','bangalore');

vi)select distinct(ano) from transact;
=============================================================
16)Write a query to print all prime numbers less than or equal to given number. Print your result on a single line, and use the ampersand () character as your separator (instead of a space).

WITH RECURSIVE numbers AS (
    SELECT 2 AS n
    UNION ALL
    SELECT n + 1 FROM numbers WHERE n + 1 <= 10
),
primes AS (
    SELECT n FROM numbers
    WHERE NOT EXISTS (
        SELECT 1 FROM numbers AS d
        WHERE d.n < n AND d.n > 1 AND n % d.n = 0
    )
)
SELECT STRING_AGG(n::text, '&') AS prime_list FROM primes;
=========================================================
17)
i)Find customers who placed orders in the last 30 days.
SELECT DISTINCT c.customer_id, c.name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= CURRENT_DATE - INTERVAL '30 days';
========================================================
ii)Which 5 products generated the highest total revenue?
SELECT p.product_id, p.name, SUM(oi.quantity * oi.price) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.name
ORDER BY total_revenue DESC
LIMIT 5;
=======================================================
iii)Find customers who have never placed an order.
SELECT c.customer_id, c.name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;
======================================================
iv)List products where stock is below 10.
SELECT product_id, name, stock
FROM products
WHERE stock < 10;
======================================================
v)What is the average order value for each customer?
SELECT o.customer_id, c.name, AVG(o.total_amount) AS avg_order_value
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
GROUP BY o.customer_id, c.name;
=====================================================
vi)Calculate total sales for each day in the past week.
SELECT o.order_date, SUM(o.total_amount) AS total_sales
FROM orders o
WHERE o.order_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY o.order_date
ORDER BY o.order_date;
======================================================
vii)Who are the top 3 customers by number of orders?
SELECT c.customer_id, c.name, COUNT(o.order_id) AS total_orders
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name
ORDER BY total_orders DESC
LIMIT 3;
=======================================================
viii)Show how many times each product was sold.
SELECT p.product_id, p.name, SUM(oi.quantity) AS total_sold
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.name;
=====================================================
ix)Total revenue grouped by product category.
SELECT cat.category_name, SUM(oi.quantity * oi.price) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
JOIN categories cat ON p.category_id = cat.category_id
GROUP BY cat.category_name;
======================================================
x)Which customers haven't ordered in the last 6 months
SELECT c.customer_id, c.name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id AND o.order_date >= CURRENT_DATE - INTERVAL '6 months'
WHERE o.order_id IS NULL;


 