11-06-2025
===========
1)In this Python challenge, you need to write a function that accepts an encoded string as a parameter. This string will contain a first name, last name, and an id.
Values in the string can be separated by any number of zeros. The id is a numeric value but will contain no zeros. The function should parse the string and return a Python dictionary that contains the first name, last name, and id values.
An example input would be “Robert000Smith000123”. The function should return the following using that input:
{ “first_name”: “Robert”, “last_name”: “Smith”, “id”: “123” }

def parse_encoded_string(encoded_str):
    # Split by '0' and filter out empty strings
    parts = list(filter(None, encoded_str.split('0')))
    
    # Assuming the format is: FirstName + LastName + ID
    return {
        "first_name": parts[0],
        "last_name": parts[1],
        "id": parts[2]
    }

# Example usage
input_str = "Robert000Smith000123"
result = parse_encoded_string(input_str)
print(result)

=========================================================
2)Write a function in Python that accepts two string parameters. The first parameter will be a string of characters, and the second parameter will be the same string of characters, but they’ll be in a different order and have one extra character. The function should return that extra character.
For example, if the first parameter is “eueiieo” and the second is “iieoedue,” then the function should return “d.”
from collections import Counter

def find_extra_char(str1, str2):
    count1 = Counter(str1)
    count2 = Counter(str2)
    
    # Subtract count1 from count2 to find the extra character
    extra = count2 - count1
    
    # Return the only key in the result
    return list(extra.keys())[0]

# Example usage
print(find_extra_char("eueiieo", "iieoedue"))  # Output: d

=========================================================
3)For the purpose of this challenge, shadow sentences are sentences where every word is the same length and order but without any of the same letters. Write a function that accepts two parameters that may or may not be shadows of each other. The function should return True if they are and False if they aren’t.
An example would be “they are round” and “fold two times,” which are shadow sentences, while “his friends” and “our company” are not because both contain an r.
def are_shadow_sentences(sentence1, sentence2):
    words1 = sentence1.split()
    words2 = sentence2.split()

    # Check same number of words
    if len(words1) != len(words2):
        return False

    for w1, w2 in zip(words1, words2):
        # Check same length
        if len(w1) != len(w2):
            return False
        # Check no common letters
        if set(w1) & set(w2):
            return False

    return True

# Example usage
print(are_shadow_sentences("they are round", "fold two times"))  # True
print(are_shadow_sentences("his friends", "our company"))        # False

=========================================================
4)Create a function in Python that accepts one parameter: a string that’s a sentence. This function should return True if any word in that sentence contains duplicate letters and False if not.

def has_duplicate_letters(sentence):
    words = sentence.split()
    for word in words:
        letters = [ch.lower() for ch in word if ch.isalpha()]  # consider only letters
        if len(set(letters)) < len(letters):
            return True
    return False

# Example usage
print(has_duplicate_letters("Each dog runs fast"))       # False
print(has_duplicate_letters("This sentence has cheese")) # True (cheese has double e)

=========================================================
5)For this challenge, you need to write a function in Python that accepts a string of ASCII characters. It should return each character’s value as a hexadecimal string. Separate each byte by a space, and return all alpha hexadecimal characters as lowercase.

def ascii_to_hex(s):
    return ' '.join(format(ord(char), '02x') for char in s)

# Example usage
print(ascii_to_hex("Hello"))

=========================================================
6)In this Python challenge, write a function that’ll accept two numbers. These numbers will represent a position on a tic-tac-toe board. They can be 0 through 8, where 0 is the top-left spot, and 8 is the bottom-right spot.
These parameters are two marks on the tic-tac-toe board. The function should return the number of the spot that can block these two spots from winning the game.

def block_win(pos1, pos2):
    winning_lines = [
        {0, 1, 2}, {3, 4, 5}, {6, 7, 8},  # rows
        {0, 3, 6}, {1, 4, 7}, {2, 5, 8},  # columns
        {0, 4, 8}, {2, 4, 6}              # diagonals
    ]
    
    for line in winning_lines:
        if pos1 in line and pos2 in line:
            third = line - {pos1, pos2}
            if len(third) == 1:
                return third.pop()  # return the missing position
    return None  # not on a winnable line

# Example usage:
print(block_win(0, 1))  # Output: 2 (to block 0,1 win on top row)
print(block_win(2, 4))  # Output: 6 (to block on diagonal)
print(block_win(0, 3))  # Output: 6 (to block left column)

=========================================================

7)Create a function in Python that accepts two parameters. They’ll both be numbers. The first will be the month as a number, and the second will be the four-digit year. The function should parse the parameters and return True if the month contains a Friday the 13th and False if it doesn’t.

import datetime

def has_friday_13th(month, year):
    try:
        date = datetime.date(year, month, 13)
        return date.weekday() == 4  # 4 = Friday
    except ValueError:
        return False  # in case of invalid month/year

========================================================
